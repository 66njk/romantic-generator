# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  status: PostStatusType
  slug: String
  tags(
    where: PostsTagWhereInput! = {}
    orderBy: [PostsTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostsTag!]
  tagsCount(where: PostsTagWhereInput! = {}): Int
  preview: ImageFieldOutput
  abstract: String
  content: Post_content_Document
  createAt: DateTime
}

enum PostStatusType {
  draft
  published
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  slug: String
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: PostStatusTypeNullableFilter
  slug: StringFilter
  tags: PostsTagManyRelationFilter
  abstract: StringFilter
  createAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input PostsTagManyRelationFilter {
  every: PostsTagWhereInput
  some: PostsTagWhereInput
  none: PostsTagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  abstract: OrderDirection
  createAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  status: PostStatusType
  slug: String
  tags: PostsTagRelateToManyForUpdateInput
  preview: ImageFieldInput
  abstract: String
  content: JSON
  createAt: DateTime
}

input PostsTagRelateToManyForUpdateInput {
  disconnect: [PostsTagWhereUniqueInput!]
  set: [PostsTagWhereUniqueInput!]
  create: [PostsTagCreateInput!]
  connect: [PostsTagWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: PostStatusType
  slug: String
  tags: PostsTagRelateToManyForCreateInput
  preview: ImageFieldInput
  abstract: String
  content: JSON
  createAt: DateTime
}

input PostsTagRelateToManyForCreateInput {
  create: [PostsTagCreateInput!]
  connect: [PostsTagWhereUniqueInput!]
}

type Project {
  id: ID!
  title: String
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input ProjectUpdateInput {
  title: String
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
}

type PostsTag {
  id: ID!
  name: String
  value: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input PostsTagWhereUniqueInput {
  id: ID
}

input PostsTagWhereInput {
  AND: [PostsTagWhereInput!]
  OR: [PostsTagWhereInput!]
  NOT: [PostsTagWhereInput!]
  id: IDFilter
  name: StringFilter
  value: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostsTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
}

input PostsTagUpdateInput {
  name: String
  value: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostsTagUpdateArgs {
  where: PostsTagWhereUniqueInput!
  data: PostsTagUpdateInput!
}

input PostsTagCreateInput {
  name: String
  value: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createPostsTag(data: PostsTagCreateInput!): PostsTag
  createPostsTags(data: [PostsTagCreateInput!]!): [PostsTag]
  updatePostsTag(
    where: PostsTagWhereUniqueInput!
    data: PostsTagUpdateInput!
  ): PostsTag
  updatePostsTags(data: [PostsTagUpdateArgs!]!): [PostsTag]
  deletePostsTag(where: PostsTagWhereUniqueInput!): PostsTag
  deletePostsTags(where: [PostsTagWhereUniqueInput!]!): [PostsTag]
}

type Query {
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  postsTags(
    where: PostsTagWhereInput! = {}
    orderBy: [PostsTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostsTag!]
  postsTag(where: PostsTagWhereUniqueInput!): PostsTag
  postsTagsCount(where: PostsTagWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
